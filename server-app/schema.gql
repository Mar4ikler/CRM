# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BlockUserInput {
  _id: String!
  isBlocked: Boolean!
}

type Chat {
  _id: String!
  messages: [Message!]
  participants: [User!]
}

type Comment {
  _id: String!
  date: DateTime!
  text: String!
  user: User!
}

input CreateCommentInput {
  date: DateTime!
  taskId: String!
  text: String!
}

input CreateTaskInput {
  client: String!
  description: String!
  developers: [String!]!
  endDate: DateTime!
  name: String!
  price: Float!
  startDate: DateTime!
  status: TaskStatus!
}

input CreateUserInput {
  email: String!
  nickname: String!
  password: String!
  role: UserRole!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input GetChatsInput {
  filterString: String!
  limit: Float!
  skip: Float!
}

input GetTasksInput {
  filterString: String!
  limit: Float!
  skip: Float!
}

type GetTasksResponse {
  count: Float!
  tasks: [Task!]!
}

input GetUsersInput {
  filterString: String!
  limit: Float!
  skip: Float!
}

type GetUsersResponse {
  count: Float!
  users: [User!]!
}

type LoginResponse {
  accessToken: String!
  user: User!
}

input LoginUserInput {
  password: String!
  username: String!
}

type Message {
  author: User!
  date: DateTime!
  text: String!
}

type Mutation {
  blockUser(blockUserInput: BlockUserInput!): User
  createComment(createCommentInput: CreateCommentInput!): Task!
  createTask(createTaskInput: CreateTaskInput!): Task!
  createUser(createUserInput: CreateUserInput!): User!
  deleteTask(taskId: String!): Task!
  deleteUser(userId: String!): User!
  login(loginUserInput: LoginUserInput!): LoginResponse!
  sendMessage(sendMessagetInput: SendMessagetInput!): Message!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type Query {
  getChats(getChatsInput: GetChatsInput!): [Chat!]!
  getTask(taskId: String!): Task!
  getTasks(getTasksInput: GetTasksInput!): GetTasksResponse!
  getUser(userId: String!): User!
  getUsers(getUsersInput: GetUsersInput!): GetUsersResponse!
}

input SendMessagetInput {
  receiverId: String!
  text: String!
}

type Subscription {
  newMessage: Message!
}

type Task {
  _id: String!
  client: User!
  comments: [Comment!]
  creator: User!
  description: String!
  developers: [User!]!
  endDate: DateTime!
  name: String!
  price: Float!
  startDate: DateTime!
  status: TaskStatus!
}

"""Task status"""
enum TaskStatus {
  ASSIGNED
  COMPLETED
  NEW
  TESTING
}

input UpdateUserInput {
  _id: String!
  email: String!
  nickname: String!
  password: String!
  role: UserRole!
}

type User {
  _id: String!
  avatar: String
  email: String!
  isBlocked: Boolean!
  isDeleted: Boolean!
  nickname: String!
  passwordHash: String!
  role: UserRole!
}

"""User roles"""
enum UserRole {
  ADMIN
  CLIENT
  DEVELOPER
  MANAGER
}